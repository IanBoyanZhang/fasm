#!/usr/bin/env python3

import platform
import subprocess
import sys

from packaging import version

VERSION_FILE = 'fasm/version.py'
VERSION_FILE_TEMPLATE = '''\
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017-2020  The SymbiFlow Authors.
#
# Use of this source code is governed by a ISC-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/ISC
#
# SPDX-License-Identifier: ISC

# ** WARNING **
# This file is auto-generated by the update_version.py script.
# ** WARNING **

version_str = "{version}"
version_tuple = {version_tuple}
try:
    from packaging.version import Version as V
    pversion = V("{version}")
except ImportError:
    pass

git_hash = "{git_hash}"
git_describe = "{git_describe}"
git_msg = """\\
{git_msg}
"""
'''

GIT = 'git'
if platform.system() == 'Windows':
    GIT = 'git.exe'


def get_hash():
    cmd = [GIT, 'rev-parse', 'HEAD']
    try:
        return subprocess.check_output(cmd).decode('utf-8').strip()
    except OSError:
        print(cmd)
        raise


def get_describe():
    cmd = [
        GIT, 'describe', '--tags', 'HEAD', '--match', 'v*', '--exclude', '*-r*'
    ]
    try:
        return subprocess.check_output(cmd).decode('utf-8').strip()
    except OSError:
        print(cmd)
        raise


def get_msg():
    cmd = [GIT, 'log', '-1', 'HEAD']
    try:
        data = subprocess.check_output(cmd).decode('utf-8')
    except OSError:
        print(cmd)
        raise
    return '\n'.join(line.rstrip() for line in data.split('\n'))


def create_version(git_describe):
    """
    >>> t = '''\\
    ... v0.0
    ... v0.0.0
    ... v0.0.0-rc1
    ... v1.0.1-265-g5f0c7a7
    ... v0.0-7004-g1cf70ea2
    ... '''
    >>> for d in t.splitlines():
    ...     v = create_version(d)
    ...     print((v, create_version_tuple(v)))
    (<Version('0.0')>, (0, 0, None))
    (<Version('0.0.0')>, (0, 0, 0, None))
    (<Version('0.0.0rc1')>, (0, 0, 0, None))
    (<Version('1.0.1.post265')>, (1, 0, 1, 265))
    (<Version('0.0.post7004')>, (0, 0, 7004))
    """
    vtag = git_describe.strip()
    if vtag.startswith('v'):
        vtag = vtag[1:]
    dashg = vtag.find('-g')
    if dashg != -1:
        vtag = vtag[:dashg]
    return version.parse(vtag)


def create_version_tuple(vdesc):
    assert isinstance(vdesc, version.Version), (vdesc, type(vdesc))
    return tuple(list(vdesc.release) + [
        vdesc.post,
    ])


def update_version_py(args):
    output = VERSION_FILE_TEMPLATE.format(**args)

    old = ''
    try:
        with open(VERSION_FILE) as f:
            old = f.read()
    except IOError as e:
        print(e)

    if old != output:
        with open(VERSION_FILE, 'w') as f:
            f.write(output)
        print('Updated {}'.format(VERSION_FILE))


def main(args):
    git_hash = get_hash()
    git_describe = get_describe()
    git_msg = get_msg()

    version = create_version(git_describe)
    version_tuple = create_version_tuple(version)

    update_version_py(locals())

    return 0


if __name__ == "__main__":
    import doctest
    failure_count, test_count = doctest.testmod()
    if failure_count > 0:
        sys.exit(-1)
    sys.exit(main(sys.argv))
